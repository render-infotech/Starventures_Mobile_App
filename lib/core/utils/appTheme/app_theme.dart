import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../pref_utils.dart';
import '../styles/size_utils.dart';
/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              14,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: appTheme.gray100,
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.gray300,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              14,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(colorScheme.primary),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        checkColor: MaterialStateProperty.all<Color>(appTheme.whiteA700),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            34,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFF1C196C),
    error: Color(0XFF1C196C),
    errorContainer: Color(0XFF009C49),
    inversePrimary: Color(0XFF1C196C),
    inverseSurface: Color(0XFF1C196C),
    onBackground: Color(0XFF95D70B),
    onError: Color(0XFF95D70B),
    onErrorContainer: Color(0XFF1C196C),
    onInverseSurface: Color(0XFF95D70B),
    onPrimary: Color(0XFF1C196C),
    onPrimaryContainer: Color(0XFF95D70B),
    onSecondary: Color(0XFF95D70B),
    onSecondaryContainer: Color(0XFF1C196C),
    onSurface: Color(0XFF95D70B),
    onSurfaceVariant: Color(0XFF1C196C),
    onTertiary: Color(0XFF95D70B),
    onTertiaryContainer: Color(0XFF1C196C),
    outline: Color(0XFF1C196C),
    outlineVariant: Color(0XFF1C196C),
    primary: Color(0XFF2B7BC8),
    primaryContainer: Color(0XFF1C196C),
    scrim: Color(0XFF1C196C),
    secondary: Color(0XFF1C196C),
    secondaryContainer: Color(0XFF009C49),
    shadow: Color(0XFF1C196C),
    surface: Color(0XFF1C196C),
    surfaceTint: Color(0XFF1C196C),
    surfaceVariant: Color(0XFF009C49),
    tertiary: Color(0XFF1C196C),
    tertiaryContainer: Color(0XFF009C49),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get navyBlue => const Color(0xFF001F3F);

  Color get purple => const Color(0xFF993299);

  Color get violet => const Color(0xFF6b00ff);
  Color get purpl10 => const Color(0xFFeadbff);

  //Color get mintygreen => const Color(0xFFd5f0f5);
  Color get mintygreen => const Color(0xFF402110);
  Color get theme=> const Color(0xFF402110);
  Color get theme2=> const Color(0xFF603711);

  //#c78cde
  // Amber
  Color get amber500 => Color(0XFFFFC107);

  // Black
  Color get black900 => Color(0XFF000000);

  Color get shadowColor => Color(0x14000000);

  // Blue
  Color get blue200 => Color(0XFF8FC4F8);

  Color get blue50 => Color(0XFFE6EDFF);

  Color get blue5001 => Color(0XFFDDEEFF);

  Color get blue5002 => Color(0XFFE6F3FF);

  Color get blue5003 => Color(0XFFD3E6FC);

  Color get blue900 => Color(0XFF0C55AB);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);

  Color get blueGray10001 => Color(0XFFD6D6D6);

  Color get blueGray10002 => Color(0XFFCECECE);

  Color get blueGray300 => Color(0XFFA3A3B5);

  Color get blueGray400 => Color(0XFF75869C);

  Color get blueGray40001 => Color(0XFF888888);

  Color get blueGray800 => Color(0XFF1F445B);

  Color get blueGray900 => Color(0XFF292D32);

  // Cyan
  Color get cyan50 => Color(0XFFD6EDFA);

  // Gray
  // Color get gray100 => Colors.red;
  Color get gray100 => Color(0XFFF4F4F4);

  Color get gray10001 => Color(0XFFF7F7F7);

  Color get gray300 => Color(0XFFE6E6E6);

  Color get gray500 => Color(0XFFACA9A9);

  Color get gray700 => Color(0XFF696969);

  Color get gray900 => Color(0XFF4A310C);

  // Grayc
  Color get gray8004c => Color(0X4C3C3C43);

  // Green
  Color get green400 => Color(0XFF65BC6A);

  Color get green50 => Color(0XFFE5F8E8);

  Color get greenA700 => Color(0XFF0DB14C);

  // Indigo
  Color get indigo50 => Color(0XFFDAE1F3);

  Color get indigo600 => Color(0XFF4B4AA4);

  Color get indigo60001 => Color(0XFF3B5998);

  Color get indigo800 => Color(0XFF283593);

  Color get indigoA200 => Color(0XFF635BFF);

  // LightBlue
  Color get lightBlue50 => Color(0XFFD2F1FF);

  // LightGreen
  Color get lightGreen50 => Color(0XFFECFCEE);

  // Orange
  Color get orange100 => Color(0XFFF5D8AC);

  Color get orange10001 => Color(0XFFFCE3BC);

  Color get orange50 => Color(0XFFFFF0D5);

  Color get orange600 => Color(0XFFD29700);

  // Pink
  Color get pink50 => Color(0XFFF7DBEE);

  // Purple
  Color get purple100 => Color(0XFFEAC8DF);

  // Red
  Color get red400 => Color(0XFFE04F4F);

  Color get red50 => Color(0XFFFDEDED);

  Color get red500 => Color(0XFFF14336);

  Color get red5001 => Color(0XFFFCEDED);

  Color get red600 => Color(0XFFDD3333);


  // White
  Color get whiteA700 => Colors.white;
// Color get whiteA700 => Color(0XFFFFFFFF);

//Gradient
  LinearGradient get blackGradient => LinearGradient(
    colors: [Color(0xFF001F3F), Color(0xFFAAAAAA)], // Dark blue to gray gradient
    begin: Alignment.bottomCenter,
    end: Alignment.topCenter,
  );
}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
